// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PaymentType {
  id        Int      @id @default(autoincrement())
  name      String
  Orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PREPARING
  FINISHED
  DELIVERED
  CANCELED
}

model Order {
  id            Int         @id @default(autoincrement())
  status        OrderStatus @default(PREPARING)
  code          Int         @default(autoincrement())
  customerName  String
  paidValue     Float
  paymentTypeId Int
  PaymentType   PaymentType @relation(fields: [paymentTypeId], references: [id])
  Foods         FoodOrder[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model FoodOrder {
  id          Int               @id @default(autoincrement())
  quantity    Int
  observation String?
  foodId      Int
  Food        Food              @relation(fields: [foodId], references: [id])
  orderId     Int
  Order       Order             @relation(fields: [orderId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  Extras      OrderFoodExtras[]
}

model OrderFoodExtras {
  id          Int       @id @default(autoincrement())
  foodOrderId Int
  FoodOrder   FoodOrder @relation(fields: [foodOrderId], references: [id])
  extraId     Int
  Extra       Extra     @relation(fields: [extraId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model FoodCategory {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String
  Foods     Food[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Food {
  id                 Int          @id @default(autoincrement())
  code               String
  name               String
  price              Float
  imageUrl           String
  description        String
  foodCategoryId     Int
  frontBackGroundUrl String
  FoodCategory       FoodCategory @relation(fields: [foodCategoryId], references: [id])
  Extras             Extra[]
  Orders             FoodOrder[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Extra {
  id              Int               @id @default(autoincrement())
  foodId          Int
  Food            Food              @relation(fields: [foodId], references: [id])
  name            String
  price           Float
  imageUrl        String
  description     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  OrderFoodExtras OrderFoodExtras[]
}
